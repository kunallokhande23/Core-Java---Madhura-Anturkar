Day 1
0. Download n extract today's contents.

1. Please revise today's work , using the "sequence.txt"

2. Go through day1/code : all code samples

3. Solve ready code samples n revise completely.
Main revision topics  : Java control structures , loops, primitive types , automatic n forced conversions(type casting)
operators , basics of class programming  , classes , objects , constructor , this keyword.
(refer to "regarding class n object.txt")
For unicode : refer to "day1-data\day1_help\readmes\regarding unicode"

4. No hands-on assignment for today.

Day 2
1. Refer to today's sequence
refer : day2-data\code without IDE\day2
n revise packages , access specifiers

2. import day2.1 in your eclipse workspace n revise code with mem pics.
(refer : whiteboard-mem-pics.png)

DO NOT copy n run below  code in IDE.
You have to go through the code n answer.

3. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());//10 20
    t1 = t2;//1st tank obj is marked GC
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());//20 20
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());//27 27
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());//37 37
  }
}

4. What will happen (solve ready code samples )
day2-data\day2_help\params_passing
4.1 TestParamPassing1.java
4.2 TestParamPassing1.java


Day 3
1. import day3.1 , in your workspce , to revise
1.1 references , obj creation n class loading , with mem pics. , methods passing reference , returning ref.
1.2 static keyword usage
1.3 arrays

2. Solve
2.1 Continue with Box array example
Can you double box width for all boxes having volume > 100 , using for-each ?
If yes : try it.

3. Fresh assignment

Create a  class Point2D  , under package "com.cdac.geometry" for representing a point in x-y co-ordinate system.

3.1 Create a parameterized constructor to accept x & y co-ords.

3.2 Add public String show()) --to return point's x & y co-ords

3.3 Add isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.
3.4 Add a method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

3.5  Create a driver  class(for UI)  , in the "tester" package "TestPoints" , with main(..)
Ask user , how many points to plot? :
Create suitable array.
3.6  Accept x,y co-ordinates for all the points n store it suitably.
3.7  Display x,y co-ordinates of all the points plotted so far ,using for-each loop.
3.8  Accept 2 indices from user .
Find out if the points at these indices are same or different (Hint : isEqual)
Print the message accordingly. 
If points are not same , display distance between these 2 points.

Day 4
No new assignments !
1. Try to Complete all pending assignments, today itself.

2.import day4.1 into your workspace n revise along with today's sequence n readmes 
2.1 Inheritance n it's  types 
2.2 Constructor invocation in the inheritance hierarchy
2.3 Polymorphism n it's  types 
2.4 method overriding rules to achieve run time poly.
2.5 @Override annotation
2.6 Applying it to a real case study : Event organizer app.

3. Answer this
When you call : 
System.out.println(ref);
How does it actually invoke : System.out.println(ref.toString());
Hint : refer to javadocs of PrintStream : println(Object ref) method



Day 5

1. Revise : inheritance , run time polymorphism , up casting , downcasting n instanceof checking n abstraction using today's sequence , readmes n code samples
(import day5.1 , day5.2 n revise completely)

2.1 Refer to today's sequence n read about Fruits hierarchy. Understand or still better confirm it completely.

3. Solve
(fresh assignment)


3.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

3.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

3.3 Add suitable constructors.

3.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

3.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ?
So will you add a taste() with this definition : returns "no specific taste" OR can u apply abstraction?

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}


3.6 Add all of above classes under the package "com.app.fruits"
3.7 Create java application FruitBasket , with main method , as a tester
3.8 Prompt user for the basket size n create suitable data structure
3.9 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be adding a fresh fruit in the basket , in all of above options.

4. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale


7. Mark all sour fruits stale 

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

10. Exit 

Day 6
1. Complete pending assignments first.

2. Revise the class work , using today's sequence n readmes
2.1 import day6.1 , to revise interfaces completely 
2.2 import day6.2 to revise intro to exc handling

3. Hands on
 Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString


Steps
3.1  Create Customer class
3.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
3.3 Create implementation class of Stack i/f -- FixedStack (array based)
3.4 Create another implementation class of Stack i/f-- GrowableStack (array based)
Can you add inheritance between Fixed Stack n Growable Stack ?

3.5
Create Tester class (Hint :  use dynamic method dispatch using interfaces)
Display Menu
Note : Must use 1 switch-case only. You won't need any complex nested control structure
Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack

2 -- Choose Growable Stack
Accept following options only after initial selection

3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit


Day 7.

1. import day7.1 to revise exc handling completely

2. import day7.2 to revise string handling

After I join ,

3. Complete stack assignment

4. run time polymorphism internals

5. Add exc handling in stack assignment.

Day 8
Refer to today's sequence .

1. import day8.1 to revise
1.1 String API
1.2 StringBuilder API
1.3 Date / Time Handling , SimpleDateFormat , parse n format methods
1.4 Enums in java (refer : day8-data\day8_help\enums\regarding enums.txt)

2. import day8.2 to revise
Core classes : Vehicle 
Vehicle HAS-A Color (enum)
Refer to AddVehicle tester.

3. After completing revision , we will discuss n build the following.
(refer : showroom-help.png)

Showroom Management system , which will keep track of vehicles added in the showroom.

1. Prompt showroom capacity
Create suitable array.
Options
1. Add Vehicle to the showroom.
Accept data --validate all i/ps --success -- add vehicle
o.w : throw exc (built in / custom exc)

2. Display all vehicle details

10. Exit

Add  validation rules
1 No dup vehicles should be added in the showroom
2 manufactureDate : must be in current financial year(1st Apr 2022 ---31st Mar 2023)
3 Vehicle color must be available
4 price : min 10000 , max 100000